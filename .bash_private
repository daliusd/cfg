if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
    tmux attach -t O || tmux new -s O
fi

HISTSIZE=100000
HISTFILESIZE=200000
shopt -s histappend
shopt -s autocd
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

eval "$(starship init bash)"

export PATH=~/bin:~/.npm-global/bin:~/.local/bin:~/Library/Python/3.7/bin:$PATH
# export PYTHONPATH=/home/dalius/.local/lib/python3.6/site-packages

if [[ "$OSTYPE" == "linux"* ]]; then
  export GEM_HOME=~/.ruby/
  export PATH=$PATH:~/.ruby/bin
fi

if [[ "$OSTYPE" == "linux"* ]]; then
  source /usr/share/doc/fzf/examples/key-bindings.bash
fi

export HISTCONTROL=ignoreboth:erasedups

if [[ "$OSTYPE" == "darwin"* ]]; then
    [[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]] && . "$(brew --prefix)/etc/profile.d/bash_completion.sh"
else
    _completion_loader git
fi

complete -o bashdefault -o default -o nospace -F __git_wrap__git_main cfg

ulimit -n 4096 # Recommendation from https://github.com/carlitux/deoplete-ternjs

# FZF should use fd command

export FZF_DEFAULT_COMMAND='fd -t f'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d"
export FZF_DEFAULT_OPTS='--bind ctrl-d:page-down,ctrl-u:page-up'

# nvim
export EDITOR=nvim

# gpg
GPG_TTY=`tty`
export GPG_TTY

function nvmrc_check() {
  echo '.nvmrc check running'
  if [[ -f .nvmrc ]]
  then
    fnm use
  fi
}

function cd() {
  builtin cd "$@"
  nvmrc_check
}

nvmrc_check

# Mac OS X stuff

if [[ "$OSTYPE" == "darwin"* ]]; then
    # UTF-8 support in iTerm2
    export LANG="en_US.UTF-8"
fi

# Git auto-completion for git short commands

__git_wrap_git_add() {
    __git_func_wrap _git_add
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_add ga

__git_wrap_git_branch() {
    __git_func_wrap _git_branch
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_branch gb

__git_wrap_git_status() {
    __git_func_wrap _git_status
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_status gs

__git_wrap_git_diff() {
    __git_func_wrap _git_diff
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_diff gd
complete -o bashdefault -o default -o nospace -F __git_wrap_git_diff gds

__git_wrap_git_commit() {
    __git_func_wrap _git_commit
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_commit gci

__git_wrap_git_checkout() {
    __git_func_wrap _git_checkout
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_checkout gco

__git_wrap_git_push() {
    __git_func_wrap _git_push
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_push gps

__git_wrap_git_pull() {
    __git_func_wrap _git_pull
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_pull gpl

__git_wrap_git_log() {
    __git_func_wrap _git_log
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_log gl
complete -o bashdefault -o default -o nospace -F __git_wrap_git_log glt

# From https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/
function delete-branches() {
  git branch |
    grep --invert-match '\*' |
    cut -c 3- |
    fzf --multi --preview="git log {}" |
    xargs git branch --delete --force
}

function br() {
  git branch |
    grep --invert-match '\*' |
    cut -c 3- |
    fzf --multi --preview="git log {}" |
    xargs git checkout
}

r() {
  if cat package.json > /dev/null 2>&1; then
      scripts=$(cat package.json | jq -r '.scripts | to_entries[] | [.key, .value] | @tsv' | fzf --height 40%)

      if [[ -n $scripts ]]; then
          script_name=$(echo "$scripts" | awk -F '\t' '{print $1}')
          echo "npm run "$script_name;
          history -s npm run $script_name
          npm run $script_name
      else
          echo "Exit: You haven't selected any script"
      fi
  else
      echo "Error: There's no package.json"
  fi
}

y() {
  if cat package.json > /dev/null 2>&1; then
      scripts=$(cat package.json | jq -r '.scripts | to_entries[] | [.key, .value] | @tsv' | fzf --height 40%)

      if [[ -n $scripts ]]; then
          script_name=$(echo "$scripts" | awk -F '\t' '{print $1}')
          echo "yarn "$script_name;
          history -s yarn $script_name
          yarn $script_name
      else
          echo "Exit: You haven't selected any script"
      fi
  else
      echo "Error: There's no package.json"
  fi
}

expand-package-script() {
  if cat package.json > /dev/null 2>&1; then
      scripts=$(cat package.json | jq -r '.scripts | to_entries[] | [.key, .value] | @tsv' | fzf --height 40%)

      if [[ -n $scripts ]]; then
          script_name=$(echo "$scripts" | awk -F '\t' '{print $2}')
          READLINE_LINE="npx $script_name"
          if [[ -z "$READLINE_POINT" ]]; then
            echo "$READLINE_LINE"
          else
            READLINE_POINT=0x7fffffff
          fi
      else
          echo "Exit: You haven't selected any script"
      fi
  else
      echo "Error: There's no package.json"
  fi
}


bind -m emacs-standard -x '"\C-e": expand-package-script'
bind -m vi-command -x '"\C-e": expand-package-script'
bind -m vi-insert -x '"\C-e": expand-package-script'
