eval "$(starship init bash)"

export PATH=~/bin:~/.local/bin:~/.npm-global/bin:~/Library/Python/3.7/bin:$PATH
export NODE_PATH=~/.npm-global/lib/node_modules/
# export PYTHONPATH=/home/dalius/.local/lib/python3.6/site-packages

export HISTCONTROL=ignoreboth:erasedups

if [[ "$OSTYPE" == "darwin"* ]]; then
    [[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]] && . "$(brew --prefix)/etc/profile.d/bash_completion.sh"
else
    _completion_loader git
fi

complete -o bashdefault -o default -o nospace -F __git_wrap__git_main cfg

# show_node_version() {
#     node -v
# }
#
# PS1='[N:$(show_node_version)]$(__git_ps1) '$PS1

ulimit -n 4096 # Recommendation from https://github.com/carlitux/deoplete-ternjs

# FZF should use fd command

export FZF_DEFAULT_COMMAND='fd -t f'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d"
export FZF_DEFAULT_OPTS='--bind ctrl-d:page-down,ctrl-u:page-up'

# nvim
export EDITOR=nvim

# gpg
GPG_TTY=`tty`
export GPG_TTY

function nvmrc_check() {
  echo '.nvmrc check running'
  if [[ -f .nvmrc ]]
  then
    fnm use
  fi
}

function cd() {
  builtin cd "$@"
  nvmrc_check
}

nvmrc_check

# Mac OS X stuff

if [[ "$OSTYPE" == "darwin"* ]]; then
    # UTF-8 support in iTerm2
    export LANG="en_US.UTF-8"
fi

# Git auto-completion for git short commands

__git_wrap_git_add() {
    __git_func_wrap _git_add
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_add ga

__git_wrap_git_branch() {
    __git_func_wrap _git_branch
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_branch gb

__git_wrap_git_status() {
    __git_func_wrap _git_status
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_status gs

__git_wrap_git_diff() {
    __git_func_wrap _git_diff
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_diff gd
complete -o bashdefault -o default -o nospace -F __git_wrap_git_diff gds

__git_wrap_git_commit() {
    __git_func_wrap _git_commit
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_commit gci

__git_wrap_git_checkout() {
    __git_func_wrap _git_checkout
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_checkout gco

__git_wrap_git_push() {
    __git_func_wrap _git_push
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_push gps

__git_wrap_git_pull() {
    __git_func_wrap _git_pull
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_pull gpl

__git_wrap_git_log() {
    __git_func_wrap _git_log
}
complete -o bashdefault -o default -o nospace -F __git_wrap_git_log gl

# From https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/
function delete-branches() {
  git branch |
    grep --invert-match '\*' |
    cut -c 3- |
    fzf --multi --preview="git log {}" |
    xargs git branch --delete --force
}

function br() {
  git branch |
    grep --invert-match '\*' |
    cut -c 3- |
    fzf --multi --preview="git log {}" |
    xargs git checkout
}

function pr-checkout() {
  local jq_template pr_number

  jq_template='"'\
'#\(.number) - \(.title)'\
'\t'\
'Author: \(.user.login)\n'\
'Created: \(.created_at)\n'\
'Updated: \(.updated_at)\n\n'\
'\(.body)'\
'"'

  pr_number=$(
    gh api 'repos/:owner/:repo/pulls' |
    jq ".[] | $jq_template" |
    sed -e 's/"\(.*\)"/\1/' -e 's/\\t/\t/' |
    fzf \
      --with-nth=1 \
      --delimiter='\t' \
      --preview='echo -e {2}' \
      --preview-window=top:wrap |
    sed 's/^#\([0-9]\+\).*/\1/'
  )

  if [ -n "$pr_number" ]; then
    gh pr checkout "$pr_number"
  fi
}

# c - browse chrome history
c() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

r() {
  if cat package.json > /dev/null 2>&1; then
      scripts=$(cat package.json | jq .scripts | sed '1d;$d' | fzf --height 40%)

      if [[ -n $scripts ]]; then
          script_name=$(echo $scripts | awk -F ': ' '{gsub(/"/, "", $1); print $1}')
          print -s "yarn run "$script_name;
          yarn run $script_name
      else
          echo "Exit: You haven't selected any script"
      fi
  else
      echo "Error: There's no package.json"
  fi
}
